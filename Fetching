// Assuming you have redux set up with actions and reducers for fetching jobs

// actions/jobActions.js
export const fetchJobs = (language) => {
  return async (dispatch) => {
    try {
      const response = await fetch(`https://jobs.github.com/positions.json?description=${language}`);
      const data = await response.json();
      dispatch({ type: 'FETCH_JOBS_SUCCESS', payload: data });
    } catch (error) {
      dispatch({ type: 'FETCH_JOBS_ERROR', payload: error });
    }
  };
};


// pages/JobListPage.jsx
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchJobs } from '../actions/jobActions';

const JobListPage = ({ match }) => {
  const language = match.params.language;
  const dispatch = useDispatch();
  const jobs = useSelector(state => state.jobs);

  useEffect(() => {
    dispatch(fetchJobs(language));
  }, [dispatch, language]);

  return (
    <div>
      <h2>Jobs for {language}</h2>
      <ul>
        {jobs.map(job => (
          <li key={job.id}>{job.title}</li>
        ))}
      </ul>
    </div>
  );
};

export default JobListPage;






// pages/JobDetailPage.jsx
import React, { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';

const JobDetailPage = ({ match }) => {
  const jobId = match.params.jobId;
  const jobs = useSelector(state => state.jobs);
  const [job, setJob] = useState(null);

  useEffect(() => {
    const selectedJob = jobs.find(job => job.id === jobId);
    setJob(selectedJob);
  }, [jobs, jobId]);

  return (
    <div>
      {job && (
        <div>
          <h2>{job.title}</h2>
          <p>{job.description}</p>
        </div>
      )}
    </div>
  );
};

export default JobDetailPage;
